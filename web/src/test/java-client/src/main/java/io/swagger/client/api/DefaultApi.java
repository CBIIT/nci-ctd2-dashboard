/*
 * CTD2 Dashboard API
 * API access to CTD2 Dashboard
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ocg@mail.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.Subject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for browse
     * @param subjectClass The subject class (required)
     * @param subjectName The name of the subject (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call browseCall(String subjectClass, String subjectName, List<String> center, List<String> role, List<Integer> tier, Integer maximum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/{subjectClass}/{subjectName}"
            .replaceAll("\\{" + "subjectClass" + "\\}", apiClient.escapeString(subjectClass.toString()))
            .replaceAll("\\{" + "subjectName" + "\\}", apiClient.escapeString(subjectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (center != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "center", center));
        if (role != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "role", role));
        if (tier != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tier", tier));
        if (maximum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maximum", maximum));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call browseValidateBeforeCall(String subjectClass, String subjectName, List<String> center, List<String> role, List<Integer> tier, Integer maximum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subjectClass' is set
        if (subjectClass == null) {
            throw new ApiException("Missing the required parameter 'subjectClass' when calling browse(Async)");
        }
        
        // verify the required parameter 'subjectName' is set
        if (subjectName == null) {
            throw new ApiException("Missing the required parameter 'subjectName' when calling browse(Async)");
        }
        

        com.squareup.okhttp.Call call = browseCall(subjectClass, subjectName, center, role, tier, maximum, progressListener, progressRequestListener);
        return call;

    }

    /**
     * returns observations for a subject
     * Returns a list observations associated with a subject
     * @param subjectClass The subject class (required)
     * @param subjectName The name of the subject (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @return Subject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Subject browse(String subjectClass, String subjectName, List<String> center, List<String> role, List<Integer> tier, Integer maximum) throws ApiException {
        ApiResponse<Subject> resp = browseWithHttpInfo(subjectClass, subjectName, center, role, tier, maximum);
        return resp.getData();
    }

    /**
     * returns observations for a subject
     * Returns a list observations associated with a subject
     * @param subjectClass The subject class (required)
     * @param subjectName The name of the subject (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @return ApiResponse&lt;Subject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Subject> browseWithHttpInfo(String subjectClass, String subjectName, List<String> center, List<String> role, List<Integer> tier, Integer maximum) throws ApiException {
        com.squareup.okhttp.Call call = browseValidateBeforeCall(subjectClass, subjectName, center, role, tier, maximum, null, null);
        Type localVarReturnType = new TypeToken<Subject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * returns observations for a subject (asynchronously)
     * Returns a list observations associated with a subject
     * @param subjectClass The subject class (required)
     * @param subjectName The name of the subject (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call browseAsync(String subjectClass, String subjectName, List<String> center, List<String> role, List<Integer> tier, Integer maximum, final ApiCallback<Subject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = browseValidateBeforeCall(subjectClass, subjectName, center, role, tier, maximum, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Subject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for centers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call centersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/centers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call centersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = centersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * returns a list of centers
     * Returns a list of centers and their submissions
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse200> centers() throws ApiException {
        ApiResponse<List<InlineResponse200>> resp = centersWithHttpInfo();
        return resp.getData();
    }

    /**
     * returns a list of centers
     * Returns a list of centers and their submissions
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse200>> centersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = centersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * returns a list of centers (asynchronously)
     * Returns a list of centers and their submissions
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call centersAsync(final ApiCallback<List<InlineResponse200>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = centersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchTermGet
     * @param term The search term (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchTermGetCall(String term, List<String> center, List<String> role, List<Integer> tier, Integer maximum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{term}"
            .replaceAll("\\{" + "term" + "\\}", apiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (center != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "center", center));
        if (role != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "role", role));
        if (tier != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tier", tier));
        if (maximum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maximum", maximum));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchTermGetValidateBeforeCall(String term, List<String> center, List<String> role, List<Integer> tier, Integer maximum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling searchTermGet(Async)");
        }
        

        com.squareup.okhttp.Call call = searchTermGetCall(term, center, role, tier, maximum, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Dashboard
     * 
     * @param term The search term (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @return List&lt;Subject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Subject> searchTermGet(String term, List<String> center, List<String> role, List<Integer> tier, Integer maximum) throws ApiException {
        ApiResponse<List<Subject>> resp = searchTermGetWithHttpInfo(term, center, role, tier, maximum);
        return resp.getData();
    }

    /**
     * Search Dashboard
     * 
     * @param term The search term (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @return ApiResponse&lt;List&lt;Subject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Subject>> searchTermGetWithHttpInfo(String term, List<String> center, List<String> role, List<Integer> tier, Integer maximum) throws ApiException {
        com.squareup.okhttp.Call call = searchTermGetValidateBeforeCall(term, center, role, tier, maximum, null, null);
        Type localVarReturnType = new TypeToken<List<Subject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Dashboard (asynchronously)
     * 
     * @param term The search term (required)
     * @param center Restrict returned observations by a comma-separated list of center ids (optional)
     * @param role Restrict returned observations by a comma-separated list of roles (optional)
     * @param tier Restrict returned observations by tier(s) (optional)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchTermGetAsync(String term, List<String> center, List<String> role, List<Integer> tier, Integer maximum, final ApiCallback<List<Subject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchTermGetValidateBeforeCall(term, center, role, tier, maximum, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Subject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submission
     * @param submissionId The name of the requested submission (required)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submissionCall(String submissionId, Integer maximum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submission/{submissionId}"
            .replaceAll("\\{" + "submissionId" + "\\}", apiClient.escapeString(submissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maximum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maximum", maximum));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submissionValidateBeforeCall(String submissionId, Integer maximum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'submissionId' is set
        if (submissionId == null) {
            throw new ApiException("Missing the required parameter 'submissionId' when calling submission(Async)");
        }
        

        com.squareup.okhttp.Call call = submissionCall(submissionId, maximum, progressListener, progressRequestListener);
        return call;

    }

    /**
     * returns content of a submission
     * Returns a submission description and a list observations in a submission
     * @param submissionId The name of the requested submission (required)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 submission(String submissionId, Integer maximum) throws ApiException {
        ApiResponse<InlineResponse2001> resp = submissionWithHttpInfo(submissionId, maximum);
        return resp.getData();
    }

    /**
     * returns content of a submission
     * Returns a submission description and a list observations in a submission
     * @param submissionId The name of the requested submission (required)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> submissionWithHttpInfo(String submissionId, Integer maximum) throws ApiException {
        com.squareup.okhttp.Call call = submissionValidateBeforeCall(submissionId, maximum, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * returns content of a submission (asynchronously)
     * Returns a submission description and a list observations in a submission
     * @param submissionId The name of the requested submission (required)
     * @param maximum The maximum number of observations returned by the query (if not specified, all observations are returned) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submissionAsync(String submissionId, Integer maximum, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submissionValidateBeforeCall(submissionId, maximum, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
